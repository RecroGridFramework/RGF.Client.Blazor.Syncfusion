@using Microsoft.AspNetCore.Components.Forms
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Navigations

<RgfFormComponent @ref="_rgfFormRef" EntityParameters="EntityParameters" FormComponent="this"
                  FormGroupLayoutTemplate="FormGroupLayoutTemplate">
    <FormTemplate Context="RgfForm">
        <EditForm EditContext="RgfForm.CurrentEditContext">
            <SfTab CssClass="e-fill rg-tabs" LoadOn="ContentLoad.Demand" @bind-SelectedItem="ActiveTabIndex">
                <TabEvents Selecting="(arg) => PreviouslyActiveTabs.Add(arg.SelectingIndex)" />
                <TabItems>
                    @foreach (var tab in RgfForm.FormData.FormTabs)
                    {
                        <TabItem TabIndex="tab.Index">
                            <ChildContent>
                                <TabHeader Text="@tab.Title" />
                            </ChildContent>
                            <ContentTemplate>
                            @foreach (var group in tab.Groups)
                            {
                                if (!string.IsNullOrEmpty(group.Title))
                                {
                                    <h5 class="mt-3">@group.Title</h5>
                                }
                                @RgfForm.GetFormGroupLayoutTemplate(new RgfFormGroupLayoutParameters(RgfForm, group))
                            }
                            </ContentTemplate>
                        </TabItem>
                    }
                </TabItems>
            </SfTab>
            @RgfForm.GetFormValidationTemplate()
        </EditForm>
    </FormTemplate>

    <FormItemTemplate>
        <FormItemComponent FormItemParameters="context" />
    </FormItemTemplate>

    <FormValidationTemplate>
        <SfCard CssClass="mt-3">
            <CardHeader Title="@RecroDict.GetRgfUiString("Error")" />
            <CardContent>
                <ValidationSummary />
            </CardContent>
        </SfCard>
    </FormValidationTemplate>
</RgfFormComponent>

<style>

    div.e-dlg-container.rg-details.@(Manager.EntityDesc.NameVersion.ToLower()) {
        width: 100%;
    }

    /*TODO: checkbox position*/
    div.e-checkbox-wrapper {
        margin-top: 1.7rem;
    }

</style>

@inject IRecroDictService RecroDict
@implements IDisposable
@code {

    [Parameter, EditorRequired]
    public RgfEntityParameters EntityParameters { get; set; } = null!;

    private IRgManager Manager => EntityParameters.Manager!;
    private RgfFormParameters FormParameters { get => EntityParameters.FormParameters; }

    private RgfFormComponent _rgfFormRef { get; set; } = null!;
    public int ActiveTabIndex { get; set; } = 0;
    public HashSet<int> PreviouslyActiveTabs { get; private set; } = new() { 0 };

    protected override void OnInitialized()
    {
        base.OnInitialized();
        FormParameters.ErrorCssClass = FormParameters.ErrorCssClass ?? "e-error";
        FormParameters.ModifiedCssClass = FormParameters.ModifiedCssClass ?? "e-success";
        EntityParameters.FormParameters.EventDispatcher.Subscribe(RgfFormEventKind.ParametersSet, OnParametersSet);
    }

    private void OnParametersSet(IRgfEventArgs<RgfFormEventArgs> args)
    {
        var rowIndex = FormParameters.FormViewKey.RowIndex;
        if (rowIndex != -1)
        {
            var buttons = new List<ButtonParameters>() {
                new(nameof(IconName.ChevronLeftDouble), RecroDict.GetRgfUiString("First"), async (arg) => await _rgfFormRef.FirstFormItemAsync()) { Disabled = rowIndex <= 0 },
                new(nameof(IconName.ChevronLeft), RecroDict.GetRgfUiString("Prev"), async (arg) => await _rgfFormRef.PrevFormItemAsync()) { Disabled = rowIndex <= 0 },
                new(nameof(IconName.ChevronRight), RecroDict.GetRgfUiString("Next"), async (arg) => await _rgfFormRef.NextFormItemAsync()) { Disabled = rowIndex + 1 >= Manager.ItemCount.Value },
                new(nameof(IconName.ChevronRightDouble), RecroDict.GetRgfUiString("Last"), async (arg) => await _rgfFormRef.LastFormItemAsync()) { Disabled = rowIndex + 1 >= Manager.ItemCount.Value } };
            FormParameters.DialogParameters.LeftButtons = buttons;
        }
        else
        {
            FormParameters.DialogParameters.LeftButtons = null;
        }
    }

    public RenderFragment<RgfFormGroupLayoutParameters> FormGroupLayoutTemplate => (param) =>
    @<div class="rg-group row my-2 g-2">
        @foreach (var prop in param.FormGroup.Properties)
        {
            @param.BaseFormComponent.GetFormItemLayoutTemplate(new RgfFormItemParameters(param.BaseFormComponent, param.FormGroup, prop))
        }
    </div>;

    public void Dispose()
    {
        EntityParameters.FormParameters.EventDispatcher.Unsubscribe(RgfFormEventKind.ParametersSet, OnParametersSet);
    }
}