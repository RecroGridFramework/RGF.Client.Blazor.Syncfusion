@using Microsoft.AspNetCore.Components.Forms
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Navigations

<RgfFormComponent @ref="_rgfFormRef" EntityParameters="EntityParameters" FormComponent="this"
                  FormGroupLayoutTemplate="FormGroupLayoutTemplate"
                  FormItemLayoutTemplate="FormItemLayoutTemplate">
    <FormTemplate Context="RgfForm">
        <EditForm EditContext="RgfForm.CurrentEditContext">
            <SfTab CssClass="e-fill rg-tabs" LoadOn="ContentLoad.Demand">
                <TabItems>
                    @foreach (var tab in RgfForm.FormData.FormTabs)
                    {
                        <TabItem TabIndex="tab.Index">
                            <ChildContent>
                                <TabHeader Text="@tab.Title" />
                            </ChildContent>
                            <ContentTemplate>
                            @foreach (var group in tab.Groups)
                            {
                                if (!string.IsNullOrEmpty(group.Title))
                                {
                                    <h5 class="mt-3">@group.Title</h5>
                                }
                                @RgfForm.GetFormGroupLayoutTemplate(new RgfFormGroupLayoutParameters(RgfForm, group))
                            }
                            </ContentTemplate>
                        </TabItem>
                    }
                </TabItems>
            </SfTab>
            @RgfForm.GetFormValidationTemplate()
        </EditForm>
    </FormTemplate>

    <FormItemTemplate>
        <FormItemComponent FormItemParameters="context" />
    </FormItemTemplate>

    <FormValidationTemplate>
        <SfCard CssClass="mt-3">
            <CardHeader Title="@RecroDict.GetRgfUiString("Error")" />
            <CardContent>
                <ValidationSummary />
            </CardContent>
        </SfCard>
    </FormValidationTemplate>
</RgfFormComponent>

<style>

    div.rg-details.@(Manager.EntityDesc.NameVersion.ToLower()) {
        width: 100%;
    }
    .e-dialog.rg-details.@(Manager.EntityDesc.NameVersion.ToLower()) {
        max-width: 80%
    }

    /*TODO: checkbox position*/
    div.e-checkbox-wrapper {
        margin-top: 1.7rem;
    }

</style>

@code {

    [Parameter, EditorRequired]
    public RgfEntityParameters EntityParameters { get; set; } = null!;

    private IRgManager Manager => EntityParameters.Manager!;
    private RgfFormParameters FormParameters { get => EntityParameters.FormParameters; }
    protected IRecroDictService RecroDict => Manager.RecroDict;

    private RgfFormComponent _rgfFormRef { get; set; } = null!;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        FormParameters.ErrorCssClass = FormParameters.ErrorCssClass ?? "e-error";
        FormParameters.ModifiedCssClass = FormParameters.ModifiedCssClass ?? "e-success";
    }

    public RenderFragment<RgfFormGroupLayoutParameters> FormGroupLayoutTemplate => (param) =>
    @<div class="row my-2 g-2">
        @foreach (var prop in param.FormGroup.Properties)
        {
            @param.BaseFormComponent.GetFormItemLayoutTemplate(new RgfFormItemParameters(param.BaseFormComponent, param.FormGroup, prop))
        }
    </div>;

    public RenderFragment<RgfFormItemParameters> FormItemLayoutTemplate => (param) =>
    @<div name="@param.Property.ClientName" class="@($"col-{param.Property.FlexColumnWidth ?? param.Group.FlexColumnWidth}")">
        @if (!string.IsNullOrEmpty(param.Property.PreElement))
        {
            @((MarkupString)param.Property.PreElement)
        }
        @param.BaseFormComponent.GetFormItemTemplate(param)
    </div>;
}
