@using Syncfusion.Blazor.Popups

<SfDialog IsModal="DialogParameters.IsModal"
          AllowDragging="true"
          EnableResize="DialogParameters.Resizable ?? false"
          CssClass="@DialogParameters.CssClass"
          ShowCloseIcon="DialogParameters.ShowCloseButton ?? false"
          Width="@(DialogParameters.Width ?? "auto")"
          Height="@DialogParameters.Height">
    <DialogTemplates Header="DialogParameters.Header">
        <Content>
            @DialogParameters.Content
            @DialogParameters.DynamicChild
        </Content>
        <FooterTemplate>
            @if (DialogParameters.FooterTemplate != null)
            {
                @DialogParameters.FooterTemplate
            }
            <div class="d-flex flex-wrap justify-content-between align-items-center">
                <div class="d-flex justify-content-start">
                    @foreach (var button in DialogParameters.LeftButtons ?? [])
                    {
                        @CreateButton(button)
                    }
                </div>
                <div class="d-flex justify-content-end">
                    @foreach (var button in DialogParameters.PredefinedButtons ?? [])
                    {
                        @CreateButton(button)
                    }
                </div>
            </div>
        </FooterTemplate>
    </DialogTemplates>
    <DialogEvents OnClose="OnClose" />
</SfDialog>

@code {

    [Parameter, EditorRequired]
    public RgfDialogParameters DialogParameters { get; set; } = null!;

    private RenderFragment<ButtonParameters> CreateButton => (button) =>
    @<SfButton CssClass="@button.CssClass" HtmlAttributes="@(new Dictionary<string, object?>() { { "title", button.Title} })" IsPrimary="button.IsPrimary"
                   Disabled="@button.Disabled" OnClick="button.Callback">
        @if(!string.IsNullOrEmpty(button.IconName) && Enum.TryParse<IconName>(button.IconName, out IconName icon))
    {
        <SfIcon Name="@icon" />
    }
        @if (!string.IsNullOrEmpty(button.ChildText))
    {
        @button.ChildText
    }
    else if (button.ChildContent != null)
    {
        @button.ChildContent
    }
    </SfButton>;

    private void OnClose(BeforeCloseEventArgs args)
    {
        if (DialogParameters.OnClose != null)
        {
            args.Cancel = DialogParameters.OnClose.Invoke() == false;
        }
    }
}