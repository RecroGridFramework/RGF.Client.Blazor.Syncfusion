@using Syncfusion.Blazor.Popups

<RgfFilterComponent EntityParameters="EntityParameters">
    <FilterTemplate Context="RgfFilterComp">
        <FilterConditionComponent FilterComponent="RgfFilterComp" Condition="RgfFilterComp.Condition" />
    </FilterTemplate>
    <FooterTemplate Context="RgfFilterComp">
        <div class="d-flex flex-row justify-content-start">
            <div class="p-2">
                <label>Query timeout</label>
                <SfNumericTextBox TValue="int?" @bind-Value="RgfFilterComp.PredefinedFilter.QueryTimeout" ShowSpinButton="false" Width="3em" Min="0" />
            </div>
            <div class="p-2">
                <SfComboBox Value="RgfFilterComp.PredefinedFilterName" CssClass="e-small" TItem="RgfPredefinedFilter" TValue="string" ShowClearButton="true"
                            DataSource="RgfFilterComp.FilterHandler.PredefinedFilters"
                            ValueChanged="(value) => RgfFilterComp.PredefinedFilterName = value">
                    <ComboBoxFieldSettings Value="Key" Text="Name" />
                    <ComboBoxEvents TItem="RgfPredefinedFilter" TValue="string" ValueChange="(args) => RgfFilterComp.OnSetPredefinedFilter(args.Value)" />
                </SfComboBox>
            </div>
            <div class="p-2">
                <SfCheckBox @bind-Checked=RgfFilterComp.PredefinedFilter.IsGlobal
                            Disabled="!Manager.RecroSec.IsAdmin" Label="@RecroDict.GetRgfUiString("Public")" LabelPosition="Syncfusion.Blazor.Buttons.LabelPosition.Before" />
            </div>
            <div class="pt-2 pb-2">
                <SfButton CssClass="e-small" HtmlAttributes="@(new Dictionary<string, object>() { {"type", "button"}, { "title", @RecroDict.GetRgfUiString("Save")} })"
                          Disabled="string.IsNullOrEmpty(RgfFilterComp.PredefinedFilter.Name) || !Manager.RecroSec.IsAdmin && RgfFilterComp.PredefinedFilter.IsGlobal"
                          OnClick="() => RgfFilterComp.OnSavePredefinedFilter()">
                    <SfIcon Name="IconName.Save" Size="IconSize.Medium" />
                </SfButton>
            </div>
            <div class="pt-2 pb-2">
                <SfButton CssClass="e-small" HtmlAttributes="@(new Dictionary<string, object>() { {"type", "button"}, { "title", @RecroDict.GetRgfUiString("Delete")} })"
                          Disabled="string.IsNullOrEmpty(RgfFilterComp.PredefinedFilter.Key) || !Manager.RecroSec.IsAdmin && RgfFilterComp.PredefinedFilter.IsGlobal"
                          OnClick="() => RgfFilterComp.OnDeletePredefinedFilter()">
                    <SfIcon Name="IconName.Trash" Size="IconSize.Medium" />
                </SfButton>
            </div>
        </div>
        <div class="d-flex flex-row justify-content-between mt-2">
            <div class="pt-2 e-bigger">
                <SfSwitch @bind-Checked="RgfFilterComp.IsFilterActive" OnLabel="@RecroDict.GetRgfUiString("On")" OffLabel="@RecroDict.GetRgfUiString("Off")" />
                @* <label>@RecroDict.GetRgfUiString("Off")/@RecroDict.GetRgfUiString("On")</label> *@
            </div>
            <div>
                <SfButton OnClick="RgfFilterComp.OnCancel">@RecroDict.GetRgfUiString("Cancel")</SfButton>
                <SfButton IsPrimary="true" OnClick="RgfFilterComp.OnOk">OK</SfButton>
            </div>
        </div>
    </FooterTemplate>
</RgfFilterComponent>

<style>

    li {
        list-style: none outside none;
    }

    .condition-container > div {
        display: inline-block;
        margin-top: 10px;
        margin-left: 4px;
    }

        .condition-container > div.combo-logical {
            width: 90px;
        }

    .condition-container.align-left {
        text-align: left !important;
    }

    .e-listbox-container {
        height: 120px;
        width: 200px
    }

</style>

@code {

    [Parameter, EditorRequired]
    public RgfEntityParameters EntityParameters { get; set; } = null!;

    private IRgManager Manager => EntityParameters.Manager!;
    private RgfFilterParameters FilterParameters { get => EntityParameters.FilterParameters; }
    private IRecroDictService RecroDict => Manager.RecroDict;
}
